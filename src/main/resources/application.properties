#postgre
#spring.datasource.url=jdbc:postgresql://localhost:5432/
#spring.datasource.driverClassName=org.postgresql.Driver
#spring.datasource.username=keycloak
#spring.datasource.password=password

#jpa
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true


#Log do Hibernate
###
logging.level.org.hibernate.sql=DEBUG


### Limitar a stacktrace ao lançar exception
server.error.include-stacktrace=never

#Actuator

### Habilitar os endpoints que por padrão vem desabilitados (Não recomendável)
### Rencomendável liberar apenas os necessarios (Segurança)
management.endpoints.web.exposure.include=info,health,metrics,prometheus
###Removendo os não utilizados
management.endpoints.web.exposure.exclude=env,beans

### Permitindo receber requisições somente de uma origem
management.endpoints.web.cors.allowed-origins=https://localhost:8080
management.endpoints.web.cors.allowed-methods=GET

###Habilitar mais detalhes do endpoint /health
#management.endpoint.health.show-details=always

###Preenchendo o endpoint info
info.app=Api de Propostas
info.developer=Montival Junior
info.empresa=Zup Innovation



proposta.analise.host=${ANALISE_URL:http://localhost:9999}

#Feign

### para controlar o tempo de espera para requisições feitas através do Feign > feign.client.config.nomeFeignClienteDefinidoNoBean.read-timeout=100
feign.client.config.AnaliseClient.read-timeout=100

### o tempo máximo para conseguir realizar a conexão com o outro sistema > feign.client.config.nomeFeignClienteDefinidoNoBean.connect-timeout=100
feign.client.config.AnaliseClient.connect-timeout=100

###

#Hibernate ou outra implementação do JPA

### controlar o timeout de execução padrão de queries através de alguma implementação da JPA.
spring.jpa.properties.javax.persistence.query.timeout=50
### Agora por default toda query só pode levar no máximo 50 milisegundos.
### Caso em algum ponto do sistema este tempo não seja suficiente, é possível de trocar através dos chamados hints da JPA.

